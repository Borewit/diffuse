module UI.Tracks.Scene.List exposing (containerId, scrollToNowPlaying, scrollToTop, view)

import Browser.Dom as Dom
import Chunky exposing (..)
import Classes as C
import Color
import Color.Ext as Color
import Color.Manipulate as Color
import Conditional exposing (ifThenElse)
import Coordinates
import Css
import Html exposing (Html, text)
import Html.Attributes exposing (class, style)
import Html.Events
import Html.Events.Extra.Mouse as Mouse
import Html.Styled
import Html.Styled.Attributes
import Html.Styled.Events
import Html.Styled.Lazy
import InfiniteList
import Json.Decode as Decode
import List.Ext as List
import Material.Icons exposing (Coloring(..))
import Material.Icons.Av as Icons
import Material.Icons.Navigation as Icons
import Maybe.Extra as Maybe
import Playlists exposing (Playlist)
import Tachyons
import Tachyons.Classes as T
import Task
import Tracks exposing (..)
import UI.DnD as DnD
import UI.Kit
import UI.Reply
import UI.Tracks.Core exposing (..)



-- ðŸ—º


type alias Necessities =
    { height : Float
    , isTouchDevice : Bool
    , isVisible : Bool
    }


view : Necessities -> Model -> Html.Styled.Html Msg
view necessities model =
    Html.Styled.Lazy.lazy7
        lazyView
        necessities
        model.collection.harvested
        model.infiniteList
        model.favouritesOnly
        model.sortBy
        model.sortDirection
        ( model.selectedPlaylist
            |> Maybe.map .autoGenerated
            |> Maybe.andThen (\bool -> ifThenElse bool Nothing <| Just model.listDnD)
        , model.selectedTrackIndexes
        )


lazyView : Necessities -> List IdentifiedTrack -> InfiniteList.Model -> Bool -> SortBy -> SortDirection -> ( Maybe (DnD.Model Int), List Int ) -> Html.Styled.Html Msg
lazyView necessities harvest infiniteList favouritesOnly sortBy sortDirection ( maybeDnD, selectedTrackIndexes ) =
    brick
        [ Html.Styled.Attributes.fromUnstyled (InfiniteList.onScroll InfiniteListMsg)
        , Html.Styled.Attributes.id containerId
        , Html.Styled.Attributes.tabindex (ifThenElse necessities.isVisible 0 -1)
        , Html.Styled.Attributes.style "-webkit-overflow-scrolling" "touch"
        ]
        [ C.disable_selection
        , T.flex_grow_1
        , T.outline_0
        , T.overflow_x_hidden
        , T.overflow_y_scroll
        , T.vh_25
        ]
        [ -- Header
          ---------
          Html.Styled.Lazy.lazy3
            header
            (Maybe.isJust maybeDnD)
            sortBy
            sortDirection

        -- List
        -------
        , Html.Styled.fromUnstyled
            (InfiniteList.view
                (InfiniteList.withCustomContainer
                    infiniteListContainer
                    (InfiniteList.config
                        { itemView =
                            case maybeDnD of
                                Just dnd ->
                                    playlistItemView
                                        necessities.isTouchDevice
                                        favouritesOnly
                                        selectedTrackIndexes
                                        dnd

                                _ ->
                                    defaultItemView
                                        necessities.isTouchDevice
                                        favouritesOnly
                                        selectedTrackIndexes

                        --
                        , itemHeight = InfiniteList.withVariableHeight dynamicRowHeight
                        , containerHeight = round necessities.height
                        }
                    )
                )
                infiniteList
                harvest
            )
        ]


containerId : String
containerId =
    "diffuse__track-list"


scrollToNowPlaying : List IdentifiedTrack -> IdentifiedTrack -> Cmd Msg
scrollToNowPlaying harvest ( identifiers, _ ) =
    harvest
        |> List.take identifiers.indexInList
        |> List.foldl (\a -> (+) <| dynamicRowHeight 0 a) 0
        |> (\n -> 22 - toFloat rowHeight / 2 + 5 + toFloat n)
        |> Dom.setViewportOf containerId 0
        |> Task.attempt (always Bypass)


scrollToTop : Cmd Msg
scrollToTop =
    Task.attempt (always Bypass) (Dom.setViewportOf containerId 0 0)



-- HEADERS


header : Bool -> SortBy -> SortDirection -> Html.Styled.Html Msg
header isPlaylist sortBy sortDirection =
    let
        sortIcon =
            (if sortDirection == Desc then
                Icons.expand_less

             else
                Icons.expand_more
            )
                15
                Inherit

        sortIconHtml =
            Html.Styled.fromUnstyled sortIcon

        maybeSortIcon s =
            ifThenElse (sortBy == s) (Just sortIconHtml) Nothing
    in
    brick
        [ Html.Styled.Attributes.css headerStyles ]
        [ T.bg_white, T.flex, T.fw6, T.relative, T.z_5 ]
        (if isPlaylist then
            [ headerColumn "" 4.5 First Nothing Bypass
            , headerColumn "#" 4.5 Between Nothing Bypass
            , headerColumn "Title" 36.0 Between Nothing Bypass
            , headerColumn "Artist" 27.5 Between Nothing Bypass
            , headerColumn "Album" 27.5 Last Nothing Bypass
            ]

         else
            [ headerColumn "" 4.5 First Nothing Bypass
            , headerColumn "Title" 37.5 Between (maybeSortIcon Title) (SortBy Title)
            , headerColumn "Artist" 29.0 Between (maybeSortIcon Artist) (SortBy Artist)
            , headerColumn "Album" 29.0 Last (maybeSortIcon Album) (SortBy Album)
            ]
        )


headerStyles : List Css.Style
headerStyles =
    [ Css.borderBottom3 (Css.px 1) Css.solid (Color.toElmCssColor UI.Kit.colors.subtleBorder)
    , Css.color (Color.toElmCssColor headerTextColor)
    , Css.fontSize (Css.px 11)
    ]


headerTextColor : Color.Color
headerTextColor =
    Color.rgb255 207 207 207



-- HEADER COLUMN


type Pos
    = First
    | Between
    | Last


headerColumn :
    String
    -> Float
    -> Pos
    -> Maybe (Html.Styled.Html msg)
    -> msg
    -> Html.Styled.Html msg
headerColumn text_ width pos maybeSortIcon msg =
    brick
        [ Html.Styled.Events.onClick msg
        , Html.Styled.Attributes.css
            [ Css.borderLeft3
                (Css.px <| ifThenElse (pos /= First) 1 0)
                Css.solid
                (Color.toElmCssColor UI.Kit.colors.subtleBorder)
            , Css.property "min-width" columnMinWidth
            , Css.width (Css.pct width)
            ]
        ]
        [ T.lh_title
        , T.pv1
        , T.relative

        --
        , ifThenElse (pos == First) T.pl3 T.pl2
        , ifThenElse (pos == Last) T.pr3 T.pr2
        , ifThenElse (pos == First) "" T.pointer
        ]
        [ brick
            [ Html.Styled.Attributes.css [ Css.top (Css.px 1) ] ]
            [ T.relative ]
            [ Html.Styled.text text_ ]
        , case maybeSortIcon of
            Just sortIcon ->
                brick
                    [ Html.Styled.Attributes.css sortIconStyles ]
                    [ T.absolute, T.mr1, T.right_0 ]
                    [ sortIcon ]

            Nothing ->
                nothing
        ]


sortIconStyles : List Css.Style
sortIconStyles =
    [ Css.fontSize (Css.px 0)
    , Css.lineHeight (Css.px 0)
    , Css.top (Css.pct 50)
    , Css.transform (Css.translateY <| Css.pct -50)
    ]



-- INFINITE LIST


infiniteListContainer :
    List ( String, String )
    -> List (Html msg)
    -> Html msg
infiniteListContainer styles =
    styles
        |> List.map (\( k, v ) -> style k v)
        |> List.append listStyles
        |> Html.div


listStyles : List (Html.Attribute msg)
listStyles =
    [ Tachyons.classes [ T.f6, T.pb1, T.pt1 ]
    , style "font-size" "12.5px"
    ]


dynamicRowHeight : Int -> IdentifiedTrack -> Int
dynamicRowHeight _ ( i, t ) =
    let
        shouldRenderGroup =
            i.group
                |> Maybe.map (.firstInGroup >> (==) True)
                |> Maybe.withDefault False
    in
    if shouldRenderGroup then
        32 + 18 + 16 + rowHeight

    else
        rowHeight



-- INFINITE LIST ITEM


defaultItemView : Bool -> Bool -> List Int -> Int -> Int -> IdentifiedTrack -> Html Msg
defaultItemView isTouchDevice favouritesOnly selectedTrackIndexes _ idx identifiedTrack =
    let
        ( identifiers, track ) =
            identifiedTrack

        shouldRenderGroup =
            identifiers.group
                |> Maybe.map (.firstInGroup >> (==) True)
                |> Maybe.withDefault False

        isSelected =
            List.member idx selectedTrackIndexes
    in
    Html.div
        []
        [ if shouldRenderGroup then
            groupNode idx identifiers

          else
            text ""

        --
        , Html.div
            (List.concat
                [ rowStyles idx isSelected identifiers

                --
                , if isTouchDevice then
                    [ touchContextMenuEvent identifiedTrack
                    , touchPlayEvent identifiedTrack
                    ]

                  else
                    [ mouseContextMenuEvent identifiedTrack
                    , mousePlayEvent identifiedTrack
                    , mouseSelectEvent identifiedTrack
                    ]

                --
                , [ T.flex
                  , T.items_center

                  --
                  , ifThenElse identifiers.isMissing "" T.pointer
                  , ifThenElse isSelected T.fw6 ""
                  ]
                    |> Tachyons.classes
                    |> List.singleton
                ]
            )
            [ favouriteColumn favouritesOnly isSelected identifiers
            , otherColumn "37.5%" False track.tags.title
            , otherColumn "29.0%" False track.tags.artist
            , otherColumn "29.0%" True track.tags.album
            ]
        ]


playlistItemView : Bool -> Bool -> List Int -> DnD.Model Int -> Int -> Int -> IdentifiedTrack -> Html Msg
playlistItemView isTouchDevice favouritesOnly selectedTrackIndexes dnd _ idx identifiedTrack =
    let
        ( identifiers, track ) =
            identifiedTrack

        listIdx =
            identifiers.indexInList

        dragEnv =
            { model = dnd
            , toMsg = ListDragAndDropMsg
            }

        isSelected =
            List.member idx selectedTrackIndexes
    in
    Html.div
        (List.concat
            [ rowStyles idx isSelected identifiers

            --
            , if isTouchDevice then
                [ touchContextMenuEvent identifiedTrack
                , touchPlayEvent identifiedTrack
                , DnD.listenToStart dragEnv listIdx
                ]

              else
                [ mouseContextMenuEvent identifiedTrack
                , mousePlayEvent identifiedTrack
                , mouseSelectEvent identifiedTrack
                , DnD.listenToStart dragEnv listIdx
                ]

            --
            , [ T.flex
              , T.items_center

              --
              , ifThenElse identifiers.isMissing "" T.pointer
              , ifThenElse isSelected T.fw6 ""
              ]
                |> Tachyons.classes
                |> List.singleton

            --
            , DnD.listenToEnterLeave dragEnv listIdx
            , DnD.listenToDrop dragEnv listIdx

            --
            , if DnD.isBeingDraggedOver listIdx dnd then
                [ dragIndicator ]

              else
                []
            ]
        )
        [ favouriteColumn favouritesOnly isSelected identifiers
        , playlistIndexColumn (Maybe.withDefault 0 identifiers.indexInPlaylist)
        , otherColumn "36.0%" False track.tags.title
        , otherColumn "27.5%" False track.tags.artist
        , otherColumn "27.5%" True track.tags.album
        ]


mouseContextMenuEvent : IdentifiedTrack -> Html.Attribute Msg
mouseContextMenuEvent ( i, _ ) =
    Html.Events.custom
        "contextmenu"
        (Decode.map
            (\event ->
                { message = ShowTrackMenu i.indexInList (Coordinates.fromTuple event.clientPos)
                , stopPropagation = True
                , preventDefault = True
                }
            )
            Mouse.eventDecoder
        )


mousePlayEvent : IdentifiedTrack -> Html.Attribute Msg
mousePlayEvent ( i, t ) =
    Html.Events.custom
        "dblclick"
        (Decode.succeed
            { message =
                if i.isMissing then
                    Bypass

                else
                    Reply [ UI.Reply.PlayTrack ( i, t ) ]
            , stopPropagation = True
            , preventDefault = True
            }
        )


mouseSelectEvent : IdentifiedTrack -> Html.Attribute Msg
mouseSelectEvent ( i, _ ) =
    Mouse.onClick (MarkAsSelected i.indexInList)


touchContextMenuEvent : IdentifiedTrack -> Html.Attribute Msg
touchContextMenuEvent ( i, _ ) =
    Html.Events.custom
        "longtap"
        (Decode.map2
            (\x y ->
                { message = ShowTrackMenu i.indexInList { x = x, y = y }
                , stopPropagation = True
                , preventDefault = True
                }
            )
            (Decode.field "x" Decode.float)
            (Decode.field "y" Decode.float)
        )


touchPlayEvent : IdentifiedTrack -> Html.Attribute Msg
touchPlayEvent ( i, t ) =
    Html.Events.custom
        "dbltap"
        (Decode.succeed
            { message =
                if i.isMissing then
                    Bypass

                else
                    Reply [ UI.Reply.PlayTrack ( i, t ) ]
            , stopPropagation = True
            , preventDefault = True
            }
        )



-- ROWS


groupNode : Int -> Identifiers -> Html Msg
groupNode idx identifiers =
    let
        groupName =
            identifiers.group
                |> Maybe.map .name
                |> Maybe.withDefault "Unknown"
    in
    Html.div
        ([ T.f7
         , T.fw7
         , T.lh_copy
         , T.pb3
         , T.ph3
         , ifThenElse (0 == idx) T.pt3 T.pt4
         , T.truncate
         ]
            |> Tachyons.classes
            |> List.addTo groupStyles
        )
        [ groupIcon
        , Html.span [ class T.v_mid ] [ text groupName ]
        ]


groupIcon : Html msg
groupIcon =
    Html.span
        [ Tachyons.classes [ T.dib, T.pr2, T.v_mid, C.lh_0 ] ]
        [ Icons.library_music 16 Inherit ]


groupStyles : List (Html.Attribute msg)
groupStyles =
    [ style "color" rowFontColors.grey
    , style "font-family" (String.join ", " UI.Kit.headerFontFamilies)
    , style "font-size" "11px"
    , style "letter-spacing" "0.005em"
    ]


rowHeight : Int
rowHeight =
    35


rowStyles : Int -> Bool -> Identifiers -> List (Html.Attribute msg)
rowStyles idx isSelected { isMissing, isNowPlaying } =
    let
        bgColor =
            if isNowPlaying then
                rowBackgroundColors.selection

            else if modBy 2 idx == 1 then
                rowBackgroundColors.whiteNear

            else
                rowBackgroundColors.white

        color =
            if isSelected then
                rowFontColors.selection

            else if isNowPlaying then
                rowFontColors.white

            else if isMissing then
                rowFontColors.grey

            else
                rowFontColors.default
    in
    [ style "background-color" bgColor
    , style "color" color
    , style "height" (String.fromInt rowHeight ++ "px")
    ]



-- COLUMNS


columnMinWidth =
    "28px"


favouriteColumn : Bool -> Bool -> Identifiers -> Html Msg
favouriteColumn favouritesOnly isSelected identifiers =
    Html.div
        ((++)
            [ Html.Events.onClick (ToggleFavourite identifiers.indexInList)
            , Tachyons.classes [ T.flex_shrink_0, T.fw4, T.pl3 ]
            ]
            (favouriteColumnStyles favouritesOnly isSelected identifiers)
        )
        [ if identifiers.isFavourite then
            text "t"

          else
            text "f"
        ]


favouriteColumnStyles : Bool -> Bool -> Identifiers -> List (Html.Attribute msg)
favouriteColumnStyles favouritesOnly isSelected { isFavourite, isNowPlaying } =
    let
        color =
            if isNowPlaying && isFavourite then
                if isSelected then
                    favColors.selection

                else
                    favColors.white

            else if isNowPlaying then
                if isSelected then
                    favColors.selectionFaded

                else
                    favColors.whiteFaded

            else if favouritesOnly || not isFavourite then
                if isSelected then
                    favColors.selectionFadedMore

                else
                    favColors.blackFaded

            else if isSelected then
                favColors.selection

            else
                favColors.red
    in
    [ style "color" color
    , style "font-family" "or-favourites"
    , style "min-width" columnMinWidth
    , style "width" "4.5%"
    ]


playlistIndexColumn : Int -> Html msg
playlistIndexColumn indexInPlaylist =
    [ T.pl2
    , T.pr2
    , C.pointer_events_none
    , T.truncate
    ]
        |> Tachyons.classes
        |> List.addTo (otherColumnStyles "4.5%")
        |> (\attributes -> Html.div attributes [ text (String.fromInt <| indexInPlaylist + 1) ])


otherColumn : String -> Bool -> String -> Html msg
otherColumn width isLast text_ =
    [ T.pl2
    , C.pointer_events_none
    , T.truncate

    --
    , ifThenElse isLast T.pr3 T.pr2
    ]
        |> Tachyons.classes
        |> List.addTo (otherColumnStyles width)
        |> (\attributes -> Html.div attributes [ text text_ ])


otherColumnStyles : String -> List (Html.Attribute msg)
otherColumnStyles columnWidth =
    [ style "min-width" columnMinWidth
    , style "width" columnWidth
    ]



-- ðŸ–¼


favColors =
    { blackFaded = Color.toCssString (Color.rgba 0 0 0 0.125)
    , red = Color.toCssString UI.Kit.colorKit.base08
    , selection = Color.toCssString UI.Kit.colors.selectionAlt
    , selectionFaded = Color.toCssString (Color.fadeOut 0.6 UI.Kit.colors.selectionAlt)
    , selectionFadedMore = Color.toCssString (Color.fadeOut 0.875 UI.Kit.colors.selectionAlt)
    , white = Color.toCssString (Color.rgb 1 1 1)
    , whiteFaded = Color.toCssString (Color.rgba 1 1 1 0.4)
    }


rowBackgroundColors =
    { selection = Color.toCssString UI.Kit.colors.selection
    , white = favColors.white
    , whiteNear = Color.toCssString (Color.rgb255 252 252 252)
    }


rowFontColors =
    { default = Color.toCssString UI.Kit.colors.text
    , grey = Color.toCssString UI.Kit.colorKit.base04
    , selection = favColors.selection
    , white = favColors.white
    }


dragIndicator : Html.Attribute msg
dragIndicator =
    style "box-shadow" ("0 1px 0 0 " ++ Color.toCssString UI.Kit.colorKit.accent ++ " inset")
