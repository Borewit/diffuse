module UI.Playlists exposing (Model, Msg(..), initialModel, update, view)

import Chunky exposing (..)
import Color
import Color.Ext as Color
import Common
import Css
import Html.Styled as Html exposing (Html, text)
import Html.Styled.Attributes exposing (css, placeholder, style)
import Html.Styled.Events exposing (onInput, onSubmit)
import List.Extra as List
import Material.Icons exposing (Coloring(..))
import Material.Icons.Content as Icons
import Material.Icons.File as Icons
import Material.Icons.Navigation as Icons
import Playlists exposing (..)
import Return3 exposing (..)
import Tachyons.Classes as T
import UI.Kit exposing (ButtonType(..))
import UI.List
import UI.Navigation exposing (..)
import UI.Page as Page
import UI.Playlists.Page exposing (Page(..))
import UI.Reply exposing (Reply(..))
import Url



-- ðŸŒ³


type alias Model =
    { collection : List Playlist
    , newContext : Maybe String
    , playlistToActivate : Maybe String
    }


initialModel : Model
initialModel =
    { collection = []
    , newContext = Nothing
    , playlistToActivate = Nothing
    }



-- ðŸ“£


type Msg
    = Activate Playlist
    | Bypass
    | Create
    | Deactivate
    | SetCreationContext String


update : Msg -> Model -> Return Model Msg Reply
update msg model =
    case msg of
        Activate playlist ->
            returnRepliesWithModel
                model
                [ ActivatePlaylist playlist
                , GoToPage Page.Index
                ]

        Create ->
            case model.newContext of
                Just playlistName ->
                    let
                        alreadyExists =
                            List.any
                                (.name >> (==) playlistName)
                                (List.filterNot .autoGenerated model.collection)

                        playlist =
                            { autoGenerated = False
                            , name = playlistName
                            , tracks = []
                            }
                    in
                    if alreadyExists then
                        returnReplyWithModel
                            model
                            (ShowNonStickyErrorNotification "There's already a playlist with this name")

                    else
                        -- TODO: Save!
                        returnRepliesWithModel
                            { model | collection = playlist :: model.collection, newContext = Nothing }
                            [ GoToPage (Page.Playlists Index) ]

                Nothing ->
                    return model

        Bypass ->
            return model

        Deactivate ->
            returnReplyWithModel
                model
                DeactivatePlaylist

        SetCreationContext playlistName ->
            return { model | newContext = Just playlistName }



-- ðŸ—º


view : Page -> Maybe Playlist -> Model -> Html Msg
view page selectedPlaylist model =
    UI.Kit.receptacle
        (case page of
            Edit encodedName ->
                let
                    playlists =
                        List.filter
                            (.autoGenerated >> (==) False)
                            model.collection
                in
                encodedName
                    |> Url.percentDecode
                    |> Maybe.andThen (\n -> List.find (.name >> (==) n) playlists)
                    |> Maybe.map (edit model)
                    |> Maybe.withDefault [ nothing ]

            Index ->
                index selectedPlaylist model

            New ->
                new model
        )



-- INDEX


index : Maybe Playlist -> Model -> List (Html Msg)
index selectedPlaylist model =
    let
        selectedPlaylistName =
            Maybe.map .name selectedPlaylist

        customPlaylists =
            model.collection
                |> List.filterNot .autoGenerated
                |> List.sortBy .name

        customPlaylistListItem playlist =
            if selectedPlaylistName == Just playlist.name then
                selectedPlaylistListItem playlist

            else
                { label = text playlist.name
                , actions =
                    [ { color = Inherit
                      , icon = Icons.more_vert
                      , msg = Nothing -- showListItemMenu
                      , title = "Menu"
                      }
                    ]
                , msg = Just (Activate playlist)
                }

        directoryPlaylists =
            model.collection
                |> List.filter .autoGenerated
                |> List.sortBy .name

        directoryPlaylistListItem playlist =
            if selectedPlaylistName == Just playlist.name then
                selectedPlaylistListItem playlist

            else
                { label = text playlist.name
                , actions = []
                , msg = Just (Activate playlist)
                }
    in
    [ -----------------------------------------
      -- Navigation
      -----------------------------------------
      UI.Navigation.local
        [ ( Icon Icons.arrow_back
          , Label Common.backToIndex Hidden
          , NavigateToPage Page.Index
          )
        , ( Icon Icons.add
          , Label "Create a new playlist" Shown
          , NavigateToPage (Page.Playlists New)
          )
        ]

    -----------------------------------------
    -- Content
    -----------------------------------------
    , UI.Kit.canister
        [ UI.Kit.h1 "Playlists"

        -- Intro
        --------
        , intro

        -- Custom Playlists
        -------------------
        , if List.isEmpty customPlaylists then
            nothing

          else
            raw
                [ category "Your Playlists"
                , UI.List.view
                    UI.List.Normal
                    (List.map customPlaylistListItem customPlaylists)
                ]

        -- Directory Playlists
        ----------------------
        , if List.isEmpty directoryPlaylists then
            nothing

          else
            raw
                [ category "Autogenerated Directory Playlists"
                , UI.List.view
                    UI.List.Normal
                    (List.map directoryPlaylistListItem directoryPlaylists)
                ]
        ]
    ]


intro : Html Msg
intro =
    [ text "Playlists are not tied to the sources of its tracks."
    , lineBreak
    , text "Same goes for favourites."
    ]
        |> raw
        |> UI.Kit.intro


category : String -> Html Msg
category cat =
    brick
        [ css categoryStyles ]
        [ T.f7, T.mb3, T.mt4, T.truncate, T.ttu ]
        [ UI.Kit.inlineIcon Icons.folder
        , inline [ T.fw7, T.ml2 ] [ text cat ]
        ]


categoryStyles : List Css.Style
categoryStyles =
    [ Css.color (Color.toElmCssColor UI.Kit.colorKit.base06)
    , Css.fontFamilies UI.Kit.headerFontFamilies
    , Css.fontSize (Css.px 11)
    ]


selectedPlaylistListItem : Playlist -> UI.List.Item Msg
selectedPlaylistListItem playlist =
    { label =
        brick
            [ style "color" (Color.toCssString UI.Kit.colorKit.accent) ]
            []
            [ text playlist.name ]
    , actions =
        [ { color = Color UI.Kit.colorKit.accent
          , icon = Icons.check
          , msg = Nothing
          , title = "Selected playlist"
          }
        ]
    , msg = Just Deactivate
    }



-- NEW


new : Model -> List (Html Msg)
new _ =
    [ -----------------------------------------
      -- Navigation
      -----------------------------------------
      UI.Navigation.local
        [ ( Icon Icons.arrow_back
          , Label "Back to list" Hidden
          , NavigateToPage (Page.Playlists Index)
          )
        ]

    -----------------------------------------
    -- Content
    -----------------------------------------
    , [ UI.Kit.h2 "Name your playlist"

      --
      , UI.Kit.textField
            [ onInput SetCreationContext
            , placeholder "The Classics"
            ]

      -- Button
      ---------
      , chunk
            [ T.mt4, T.pt2 ]
            [ UI.Kit.button
                Normal
                Bypass
                (text "Create playlist")
            ]
      ]
        |> UI.Kit.canisterForm
        |> List.singleton
        |> UI.Kit.centeredContent
        |> List.singleton
        |> slab
            Html.form
            [ onSubmit Create ]
            [ T.flex
            , T.flex_grow_1
            , T.tc
            ]
    ]



-- EDIT


edit : Model -> Playlist -> List (Html Msg)
edit _ _ =
    [ nothing ]
